class <%= @migration_class_name %> < ActiveRecord::Migration<%= ActiveRecord::VERSION::MAJOR < 5 ? '' : '[5.0]' %>
  require 'logidze/migration'
  include Logidze::Migration

  def up
    <% if update? %>
    execute "DROP TRIGGER logidze_on_<%= table_name %> on <%= table_name %>;"
    <% elsif !only_trigger? %>
    add_column :<%= table_name %>, :log_data, :jsonb
    <% end %>

    execute <<-SQL
      CREATE TRIGGER logidze_on_<%= table_name %>
      BEFORE UPDATE OR INSERT ON <%= table_name %> FOR EACH ROW
      WHEN (coalesce(#{current_setting('logidze.disabled')}, '') <> 'on')
      EXECUTE PROCEDURE logidze_logger(<%= logidze_logger_parameters %>);
    SQL

    <% if backfill? %>
    execute <<-SQL
      UPDATE <%= table_name %> as t
      SET log_data = logidze_snapshot(<%= logidze_snapshot_parameters %>);
    SQL
    <% end %>
  end

  def down
    <% if update? %>
    # NOTE: We have no idea on how to revert the migration
    # ('cause we don't know the previous trigger params),
    # but you can do that on your own.
    # 
    # Uncomment this line if you want to raise an error.
    # raise ActiveRecord::IrreversibleMigration
    <% else %>
    execute "DROP TRIGGER IF EXISTS logidze_on_<%= table_name %> on <%= table_name %>;"

    <% if !only_trigger? %>
    remove_column :<%= table_name %>, :log_data
    <% end %>
    <% end %>
  end
end
