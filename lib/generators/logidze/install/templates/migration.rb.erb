class <%= @migration_class_name %> < ActiveRecord::Migration
  require 'logidze/migration'
  include Logidze::Migration

  def up
    unless current_setting_missing_supported?
      execute <<-SQL
        DO $$
          BEGIN
          EXECUTE 'ALTER DATABASE ' || quote_ident(current_database()) || ' SET logidze.disabled=' || quote_literal('');
          EXECUTE 'ALTER DATABASE ' || quote_ident(current_database()) || ' SET logidze.responsible=' || quote_literal('');
          END;
        $$
        LANGUAGE plpgsql;
      SQL
    end

    execute <<-SQL
      CREATE OR REPLACE FUNCTION logidze_version(v bigint, data jsonb, blacklist text DEFAULT '', whitelist text DEFAULT '') RETURNS jsonb AS $body$
        DECLARE
          buf jsonb;
          filtered_data jsonb;
          filtered_array jsonb;
        BEGIN
          IF blacklist <> 'null' THEN
            filtered_array := logidze_exclude_keys(data, array['log_data']::text[] || string_to_array(blacklist, ','));
          ELSIF blacklist = 'null' AND whitelist <> 'null' THEN
            filtered_array := logidze_include_keys(data, string_to_array(whitelist, ','));
          ELSE
            filtered_array := logidze_exclude_keys(data, array['log_data']::text[]);
          END IF;
          buf := jsonb_build_object(
                   'ts',
                   (extract(epoch from now()) * 1000)::bigint,
                   'v',
                    v,
                    'c',
                    filtered_array
                   );
          IF coalesce(#{current_setting('logidze.responsible')}, '') <> '' THEN
            buf := jsonb_set(buf, ARRAY['r'], to_jsonb(current_setting('logidze.responsible')));
          END IF;
          RETURN buf;
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_snapshot(item jsonb, blacklist text DEFAULT '', whitelist text DEFAULT '') RETURNS jsonb AS $body$
        BEGIN
          return json_build_object(
            'v', 1,
            'h', jsonb_build_array(
                   logidze_version(1, item, blacklist, whitelist)
                 )
            );
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_exclude_keys(obj jsonb, keys text[]) RETURNS jsonb AS $body$
        DECLARE
          res jsonb;
          key text;
        BEGIN
          res := obj;
          FOREACH key IN ARRAY keys
          LOOP
            res := res - key;
          END LOOP;
          RETURN res;
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_include_keys(obj jsonb, keys text[]) RETURNS jsonb AS $body$
        DECLARE
          res jsonb;
          key text;
          keys_arr text[];
        BEGIN
          res := obj;
          keys_arr :=  array(select * from jsonb_object_keys(obj));
          FOREACH key IN ARRAY keys_arr
          LOOP
            IF NOT keys && array[key]::text[] THEN
              res := res - key;
            END IF;
          END LOOP;
          RETURN res;
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_compact_history(log_data jsonb) RETURNS jsonb AS $body$
        DECLARE
          merged jsonb;
        BEGIN
          merged := jsonb_build_object(
            'ts',
            log_data#>'{h,1,ts}',
            'v',
            log_data#>'{h,1,v}',
            'c',
            (log_data#>'{h,0,c}') || (log_data#>'{h,1,c}')
          );

          IF (log_data#>'{h,1}' ? 'r') THEN
            merged := jsonb_set(merged, ARRAY['r'], log_data#>'{h,1,r}');
          END IF;

          return jsonb_set(
            log_data,
            '{h}',
            jsonb_set(
              log_data->'h',
              '{1}',
              merged
            ) - 0
          );
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_logger() RETURNS TRIGGER AS $body$
        DECLARE
          changes jsonb;
          new_v integer;
          size integer;
          history_limit integer;
          current_version integer;
          merged jsonb;
          iterator integer;
          item record;
        BEGIN
          IF TG_OP = 'INSERT' THEN

            NEW.log_data := logidze_snapshot(to_jsonb(NEW.*), TG_ARGV[1], TG_ARGV[2]);

          ELSIF TG_OP = 'UPDATE' THEN

            IF OLD.log_data is NULL OR OLD.log_data = '{}'::jsonb THEN
              NEW.log_data := logidze_snapshot(to_jsonb(NEW.*), TG_ARGV[1], TG_ARGV[2]);
              RETURN NEW;
            END IF;

            IF TG_ARGV[0] <> 'null' THEN
              history_limit := TG_ARGV[0];
            END IF;

            current_version := (NEW.log_data->>'v')::int;

            IF NEW = OLD THEN
              RETURN NEW;
            END IF;

            IF current_version < (NEW.log_data#>>'{h,-1,v}')::int THEN
              iterator := 0;
              FOR item in SELECT * FROM jsonb_array_elements(NEW.log_data->'h')
              LOOP
                IF (item.value->>'v')::int > current_version THEN
                  NEW.log_data := jsonb_set(
                    NEW.log_data,
                    '{h}',
                    (NEW.log_data->'h') - iterator
                  );
                END IF;
                iterator := iterator + 1;
              END LOOP;
            END IF;

            changes := hstore_to_jsonb_loose(
              hstore(NEW.*) - hstore(OLD.*)
            );

            new_v := (NEW.log_data#>>'{h,-1,v}')::int + 1;

            size := jsonb_array_length(NEW.log_data->'h');

            NEW.log_data := jsonb_set(
              NEW.log_data,
              ARRAY['h', size::text],
              logidze_version(new_v, changes, TG_ARGV[1], TG_ARGV[2]),
              true
            );

            NEW.log_data := jsonb_set(
              NEW.log_data,
              '{v}',
              to_jsonb(new_v)
            );

            IF history_limit IS NOT NULL AND history_limit = size THEN
              NEW.log_data := logidze_compact_history(NEW.log_data);
            END IF;
          END IF;

          return NEW;
        END;
        $body$
        LANGUAGE plpgsql;
    SQL
  end

  def down
    <% unless update? %>
    execute <<-SQL
      DROP FUNCTION logidze_version(bigint, jsonb, text, text) CASCADE;
      DROP FUNCTION logidze_compact_history(jsonb) CASCADE;
      DROP FUNCTION logidze_snapshot(jsonb, text, text) CASCADE;
      DROP FUNCTION logidze_logger() CASCADE;
    SQL
    <% end %>
  end
end
